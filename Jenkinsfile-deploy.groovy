@Library('common-pipelines@v9.1.26') _

// -----------------------------------------------------------------------------------
// The following params are automatically provided by the callback gateway as inputs
// to the Jenkins pipeline that starts this job.
//
// params["SHA"]                    - Sha used to start the pipeline
// params["BRANCH_NAME"]            - Name of GitHub branch the SHA is associated with
// params["UNIQUE_BUILD_ID"]        - A randomly generated unique ID for this job run
// params["ENQUEUED_AT_TIMESTAMP"]  - Unix timestamp generated by callback gateway
// params["JSON"]                   - Extensible json doc with extra information
// params["GITHUB_REPOSITORY"]      - GitHub ssh url of repository (git://....)
// -----------------------------------------------------------------------------------

common = new org.doordash.utils.experimental.Common()
gitUrl = params['GITHUB_REPOSITORY']
sha = params['SHA']

stage('GitHub Status') {
  curlSlave {
    common.setGitHubShaStatus(gitUrl, sha, message: 'Start Jenkinsfile-deploy Pipeline')
  }
}

stage('Build') {
  buildSlave {
    common.dockerBuildTagPush(gitUrl, sha, branch: params['BRANCH_NAME'])
  }
}

stage('Testing') {
  genericSlave {
    common.runCommand(gitUrl, sha, command: 'echo "test placeholder"')
  }
}

stage('Deploy to staging') {
  genericSlave {
    deployHelm(gitUrl, sha, targetCluster: 'staging', targetNamespace: 'staging')
  }
}

stage('Deploy to prod') {
  try {
    timeout(time: 10, unit: 'MINUTES') {
      input 'Deploy to production?'
    }
  } catch(err) {
    error('Aborted due to timeout!')
  }
  genericSlave {
    deployHelm(gitUrl, sha, targetCluster: 'prod', targetNamespace: 'prod')
  }
}

def deployHelm(Map optArgs = [:], String gitUrl, String sha) {
  optArgs = [targetCluster: 'default', targetNamespace: 'default', targetConfig: '*', doorctlVersion: 'v0.0.104'] << optArgs
  serviceName = 'service-template'

  github = new org.doordash.Github()
  os = new org.doordash.Os()

  os.deleteDirContentsAsRoot()
  github.fastCheckoutScm(gitUrl, sha, "service")
  withCredentials([file(credentialsId: "K8S_CONFIG_${optArgs.targetCluster.toUpperCase()}_NEW", variable: 'k8sCredsFile')]) {
    sh """|#!/bin/bash
          |cd service
          |set -ex
          |
          |# log manifest to CI/CD
          |docker run --rm -v $k8sCredsFile:/root/.kube/config -v $WORKSPACE/service:/apps alpine/helm:2.10.0 upgrade $serviceName _infra/charts/$serviceName/ --tiller-namespace ${optArgs.targetNamespace} --namespace ${optArgs.targetNamespace} --force --install --recreate-pods --set image.tag=$sha -f _infra/charts/$serviceName/values-${optArgs.targetCluster}.yaml --wait --debug --dry-run
          |
          |docker run --rm -v $k8sCredsFile:/root/.kube/config -v $WORKSPACE/service:/apps alpine/helm:2.10.0 upgrade $serviceName _infra/charts/$serviceName/ --tiller-namespace ${optArgs.targetNamespace} --namespace ${optArgs.targetNamespace} --force --install --recreate-pods --set image.tag=$sha -f _infra/charts/$serviceName/values-${optArgs.targetCluster}.yaml --wait
          |""".stripMargin()
  }
}
