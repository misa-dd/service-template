@Library('common-pipelines@10.17.0') _

import org.doordash.Github

// -----------------------------------------------------------------------------------
// The following params are automatically provided by the callback gateway as inputs
// to the Jenkins pipeline that starts this job.
//
// params["SHA"]                    - Sha used to start the pipeline
// params["BRANCH_NAME"]            - Name of GitHub branch the SHA is associated with
// params["UNIQUE_BUILD_ID"]        - A randomly generated unique ID for this job run
// params["ENQUEUED_AT_TIMESTAMP"]  - Unix timestamp generated by callback gateway
// params["JSON"]                   - Extensible json doc with extra information
// params["GITHUB_REPOSITORY"]      - GitHub ssh url of repository (git://....)
// -----------------------------------------------------------------------------------

pipeline {
  options {
    timestamps()
    skipStagesAfterUnstable()
    timeout(time: 30, unit: 'MINUTES')
  }
  agent {
    label 'universal'
  }
  stages {
    stage('Startup') {
      steps {
        setGitHubStatus "Start Jenkinsfile-nodeploy Pipeline", "Started."
      }
    }
    stage('Docker Build') {
      steps {
        script {
          new Github().doClosureWithStatus({
            common = load "${WORKSPACE}/Jenkinsfile-common.groovy"
            common.dockerBuild(params['GITHUB_REPOSITORY'], params['SHA'])
          }, params['GITHUB_REPOSITORY'], params['SHA'], 'Docker Build', "${BUILD_URL}console")
        }
      }
    }
    stage('Unit Tests') {
      steps {
        script {
          new Github().doClosureWithStatus({
            common = load "${WORKSPACE}/Jenkinsfile-common.groovy"
            common.runTests('Unit Tests', params['GITHUB_REPOSITORY'], params['SHA'])
          }, params['GITHUB_REPOSITORY'], params['SHA'], 'Unit Tests', "${BUILD_URL}console")
        }
      }
    }
  }
  post {
    always {
      script {
        common.dockerClean()
      }
    }
  }
}
